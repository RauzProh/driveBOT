import asyncio

from aiogram import types
from aiogram.fsm.context import FSMContext


from telegram.keyboards import kb_get_number, ikb_admin_choice, ikb_admin_approve,choice_region

from db.models.user import Role, Status, User
from db.crud.user import create_user, get_user_by_tg_id, update_user
from db.core import get_admins, take_order, get_actual_orders_for_admin
from db.models.order import Order, OrderStatus, OrderMode
from telegram.states import OrderForm, Get_Photos
from telegram.texts import reg_finish,text_get_car_photos,generate_text_new_reg_user
from collections import defaultdict

from aiogram import Router
import os
# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
SAVE_PATH = "downloads"
os.makedirs(SAVE_PATH, exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
media_storage = {}
photo_list_xxx = []
dirks = []
albums = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ media_group_id
albums = defaultdict(list)
router_photos = Router()

@router_photos.message(Get_Photos.drive_ud)
async def order_city(message: types.Message, state: FSMContext):
    group_id = message.media_group_id
    albums[group_id].append(message)

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç (–¢–µ–ª–µ–≥—Ä–∞–º —à–ª—ë—Ç –∏—Ö –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –∞–ª—å–±–æ–º–∞
    if albums[group_id][-1].message_id == message.message_id:
        photos = albums.pop(group_id)
        count = len(photos)
        spisok_photos = []
        for i, msg in enumerate(photos, start=1):
            # if not msg.photo:  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ
            #     continue
            # –±–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            photo = msg.photo[-1]  
            file_id = photo.file_id  
            destination = f"downloads/{file_id}.jpg"
            # —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ bot API
            await message.bot.download(file_id, destination=destination)
            spisok_photos.append(destination)

        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {count} —Ñ–æ—Ç–æ. –í—Å–µ —Å–∫–∞—á–∞–Ω—ã.")
        await state.update_data(drive_ud=spisok_photos)
        await message.answer("üì∑  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ ")
        await state.set_state(Get_Photos.selfie)


@router_photos.message(Get_Photos.selfie)
async def order_city(message: types.Message, state: FSMContext):
    group_id = message.media_group_id
    albums[group_id].append(message)

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç (–¢–µ–ª–µ–≥—Ä–∞–º —à–ª—ë—Ç –∏—Ö –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –∞–ª—å–±–æ–º–∞
    if albums[group_id][-1].message_id == message.message_id:
        photos = albums.pop(group_id)
        count = len(photos)
        spisok_photos = []
        for i, msg in enumerate(photos, start=1):
            # –±–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            photo = msg.photo[-1]  
            file_id = photo.file_id  
            destination = f"downloads/{file_id}.jpg"
            # —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ bot API
            await message.bot.download(file_id, destination=destination)
            spisok_photos.append(destination)

        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {count} —Ñ–æ—Ç–æ. –í—Å–µ —Å–∫–∞—á–∞–Ω—ã.")
        await state.update_data(selfie=destination)
        await message.answer(text_get_car_photos)
        await state.set_state(Get_Photos.car_photos)


    # if message.photo:
    #         photo = message.photo[-1]
    #         file_info = await message.bot.get_file(photo.file_id)
    #         file_path = file_info.file_path
    #         destination = f"downloads/{photo.file_id}.jpg"
    #         await message.bot.download_file(file_path, destination)
    #         await state.update_data(selfie=destination)
    #         await message.answer(text_get_car_photos)
    #         await state.set_state(Get_Photos.car_photos)
    # else:
    #         await message.answer("üì∑  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ ")

@router_photos.message(Get_Photos.car_photos)
async def order_city(message: types.Message, state: FSMContext):
    group_id = message.media_group_id
    albums[group_id].append(message)

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç (–¢–µ–ª–µ–≥—Ä–∞–º —à–ª—ë—Ç –∏—Ö –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –∞–ª—å–±–æ–º–∞
    if albums[group_id][-1].message_id == message.message_id:
        photos = albums.pop(group_id)
        count = len(photos)
        spisok_photos = []
        for i, msg in enumerate(photos, start=1):
            # –±–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            photo = msg.photo[-1]  
            file_id = photo.file_id  
            destination = f"downloads/{file_id}.jpg"
            # —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ bot API
            await message.bot.download(file_id, destination=destination)
            spisok_photos.append(destination)

        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {count} —Ñ–æ—Ç–æ. –í—Å–µ —Å–∫–∞—á–∞–Ω—ã.")
        await state.update_data(car_photos=spisok_photos)
        await message.answer("üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –°–¢–° —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç.")
        await state.set_state(Get_Photos.sts)

    # if message.media_group_id and len(message.photo)>=2:
    #         photo = []
    #         for i in message.photo:
    #             photo = i
    #             file_info = await message.bot.get_file(photo.file_id)
    #             file_path = file_info.file_path
    #             destination = f"downloads/{photo.file_id}.jpg"
    #             await message.bot.download_file(file_path, destination)
    #             photo.append(destination)
    #         await state.update_data(car_photos=photo)
    #         await message.answer("üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –°–¢–° —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç.")
    #         await state.set_state(Get_Photos.sts)
    # else:
    #         await message.answer("üì∑  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è - —Å–Ω–∞—Ä—É–∂–∏ –∏ –∏–∑–Ω—É—Ç—Ä–∏.")

@router_photos.message(Get_Photos.sts)
async def order_city(message: types.Message, state: FSMContext):
    group_id = message.media_group_id
    albums[group_id].append(message)

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç (–¢–µ–ª–µ–≥—Ä–∞–º —à–ª—ë—Ç –∏—Ö –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –∞–ª—å–±–æ–º–∞
    if albums[group_id][-1].message_id == message.message_id:
        photos = albums.pop(group_id)
        count = len(photos)
        spisok_photos = []
        for i, msg in enumerate(photos, start=1):
            # –±–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            photo = msg.photo[-1]  
            file_id = photo.file_id  
            destination = f"downloads/{file_id}.jpg"
            # —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ bot API
            await message.bot.download(file_id, destination=destination)
            spisok_photos.append(destination)

        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {count} —Ñ–æ—Ç–æ. –í—Å–µ —Å–∫–∞—á–∞–Ω—ã.")
        await state.update_data(sts=spisok_photos)
        data = await state.get_data()
        #json with all photos
        documents = {
                "selfie": data['selfie'],
                "car_photos": data['car_photos'], #list of 2 photos
                "driver_license": data['drive_ud'], #list of 2 photos
                "sts": data['sts'] #list of 2 photos
            }
        user_get = await get_user_by_tg_id(message.from_user.id)
        get_text_reg_user = generate_text_new_reg_user(user_get)
        print(documents)
        reg_media = create_registration_media(documents, selfie_caption=get_text_reg_user)

        await update_user(message.from_user.id, documents=documents, status=Status.PENDING)
        await message.answer(reg_finish)
        print(123)
        print("\n\n\n")
        try:
            admins = await get_admins()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
            admins = []
        print(admins)
        tasks = []

        for admin in admins:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            tasks.append(send_to_admin(message, reg_media, admin))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
        await asyncio.gather(*tasks, return_exceptions=True)


    # if message.photo and len(message.photo)==2:
    #         photo = []
    #         for i in message.photo:
    #             photo = i
    #             file_info = await message.bot.get_file(photo.file_id)
    #             file_path = file_info.file_path
    #             destination = f"downloads/{photo.file_id}.jpg"
    #             await message.bot.download_file(file_path, destination)
    #             photo.append(destination)
    #         await state.update_data(sts=photo)
    #         data = await state.get_data()
    #         #json with all photos
    #         documents = {
    #             "selfie": data['selfie'],
    #             "car_photos": data['car_photos'], #list of 2 photos
    #             "driver_license": data['drive_ud'], #list of 2 photos
    #             "sts": data['sts'] #list of 2 photos
    #         }
    #         get_text_reg_user = generate_text_new_reg_user(user)

    #         reg_media = create_registration_media(documents, selfie_caption=get_text_reg_user)

    #         await update_user(message.from_user.id, documents=documents, status=Status.PENDING)
    #         await message.answer(reg_finish)
    #         admins = await get_admins()
    #         print(admins)
    #         user = await get_user_by_tg_id(message.from_user.id)
    #         tasks = []

    #         for admin in admins:
    #             # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
    #             tasks.append(send_to_admin(message, reg_media, admin))

    #         # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
    #         await asyncio.gather(*tasks, return_exceptions=True)
    # else:
    #         await message.answer("üì∑  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–¢–° —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.")


from typing import Dict, List

def create_registration_media(documents: Dict[str, List[str]], selfie_caption: str = None) -> List[types.InputMediaPhoto]:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param documents: JSON —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      {
                          "selfie": str,
                          "car_photos": List[str],
                          "driver_license": List[str],
                          "sts": List[str]
                      }
    :param selfie_caption: –ø–æ–¥–ø–∏—Å—å –∫ —Å–µ–ª—Ñ–∏ (—Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
    :return: —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ send_media_group
    """
    media: List[types.InputMediaPhoto] = []

    # 1. –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    for car_photo in documents.get("car_photos", []):
        media.append(types.InputMediaPhoto(media=types.FSInputFile(car_photo)))

    # 2. –°–µ–ª—Ñ–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
    if selfie := documents.get("selfie"):
        media.insert(0, types.InputMediaPhoto(media=types.FSInputFile(selfie), caption=selfie_caption))

    # 3. –î–æ–∫—É–º–µ–Ω—Ç—ã: –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∏ –°–¢–°
    for doc_type in ["driver_license", "sts"]:
        for doc_photo in documents.get(doc_type, []):
            media.append(types.InputMediaPhoto(media=types.FSInputFile(doc_photo)))

    return media

async def send_to_admin(message: types.Message, media, admin: User):
    await message.bot.send_media_group(admin.tg_id, media=media, parse_mode="Markdown")
    await message.bot.send_message(
                    admin.tg_id,
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è - [{message.from_user.id}](tg://user?id={message.from_user.id})",
                    reply_markup=ikb_admin_approve(message.from_user.id, parse_mode="Markdown")  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )
    return


