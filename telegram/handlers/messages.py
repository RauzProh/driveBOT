import asyncio

from aiogram import types
from aiogram.fsm.context import FSMContext

from telegram.keyboards import kb_get_number, ikb_admin_choice, ikb_admin_approve,choice_region

from db.models.user import Role, Status, User
from db.crud.user import create_user, get_user_by_tg_id, update_user
from db.core import get_admins, take_order, get_actual_orders_for_admin
from db.models.order import Order, OrderStatus, OrderMode
from telegram.states import OrderForm, Get_Photos
from telegram.texts import reg_finish,text_get_car_photos,generate_text_new_reg_user

from aiogram import Router

# –°–æ–∑–¥–∞–µ–º Router
router_message = Router()



import re

def is_valid_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:
    +7XXXXXXXXXX
    8XXXXXXXXXX
    7XXXXXXXXXX
    """
    pattern = re.compile(r'^(?:\+7|7|8)\d{10}$')
    return bool(pattern.match(phone))

def is_valid_full_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –§–ò–û.
    –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.
    –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∏–ª–∏ 3 —Å–ª–æ–≤–∞.
    """
    parts = name.strip().split()
    if len(parts) < 2 or len(parts) > 3:
        return False

    pattern = re.compile(r'^[–ê-–Ø–Å–∞-—è—ëA-Za-z-]+$')
    for part in parts:
        if not pattern.match(part):
            return False
    return True

async def send_to_admin(message: types.Message, media, admin: User):
    await message.bot.send_media_group(admin.tg_id, media=media)
    await message.bot.send_message(
                    admin.tg_id,
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è - {message.from_user.id}",
                    reply_markup=ikb_admin_approve(message.from_user.id)  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )
    return

@router_message.message()
async def messages(message: types.Message, state: FSMContext):
    
    tg_id = message.from_user.id
    user = await get_user_by_tg_id(tg_id)
    if not user:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user = await create_user(
            tg_id=tg_id,
            role=Role.DRIVER
        )
    
    
    res = await get_user_by_tg_id(message.from_user.id)

    print(res.__dict__)

    if message.text == '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑' and res.role == Role.ADMIN:
        tg_id = message.from_user.id
        user = await get_user_by_tg_id(tg_id)
        if not user or user.role != Role.ADMIN:
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        await state.set_state(OrderForm.city)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–∑–∞:")
        return
    
    if message.text == '–£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏' and res.role == Role.ADMIN:
        from_db_orders = await get_actual_orders_for_admin()

        if not from_db_orders:
            await message.answer("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        msg = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
        for order in from_db_orders:
            msg += f"ID: {order.id}, –ì–æ—Ä–æ–¥: {order.city}, –°—Ç–∞—Ç—É—Å: {order.status.value}\n"


        await message.answer(msg)
        return
    if res.phone is None:
        if message.contact:
            phone_number = message.contact.phone_number
            if is_valid_phone(phone_number):
                await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
                await update_user(message.from_user.id, phone=phone_number)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û.")

            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        elif message.text:
            if is_valid_phone(message.text):
                phone_number = message.text
                await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
                await update_user(message.from_user.id, phone=phone_number)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û.")

            else:
                await message.answer(
                    f"{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è ELITE TRANSFER!"
                )
                await message.answer("""
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Å–µ—Ä–≤–∏—Å–µ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–π–º—ë—Ç 5 –º–∏–Ω—É—Ç. 

–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—è–∑—É–µ–º—Å—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –Ω–∏ –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ.""")
                await message.answer(
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=kb_get_number
    )           
        return


        
    if res.full_name is None:
        if is_valid_full_name(message.text):
            await message.answer(f"–í–∞—à–µ –§–ò–û {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ.")
            await update_user(message.from_user.id, full_name=message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–≥–∏–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.", reply_markup=choice_region)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã).")
        return
    if res.city is None:
        if message.text not in ["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π", "–ö—Ä—ã–º"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
            return
        await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥ {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        await update_user(message.from_user.id, city=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.")
        return
    if res.car_brand is None:
        await message.answer(f"–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å –∞–≤—Ç–æ {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")
        await update_user(message.from_user.id, car_brand=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ.")
        return
    if res.car_color is None:
        await message.answer(f"–¶–≤–µ—Ç –∞–≤—Ç–æ {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        await update_user(message.from_user.id, car_color=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ.")
        return
    if res.car_number is None:
        await message.answer(f"–ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        await update_user(message.from_user.id, car_number=message.text)
        await message.answer("üì∑  –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç. ")
        await state.set_state(Get_Photos.drive_ud)
        return
    if res.car_photo is None:
        if message.photo:
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            file_path = file_info.file_path
            destination = f"downloads/{photo.file_id}.jpg"
            await message.bot.download_file(file_path, destination)
            await update_user(message.from_user.id, car_photo=destination)
            await message.answer("–§–æ—Ç–æ –∞–≤—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ.")
            await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.")
        return
    if res.documents is None:
        if message.photo:
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            file_path = file_info.file_path
            destination = f"downloads/{photo.file_id}.jpg"
            await message.bot.download_file(file_path, destination)
            await update_user(message.from_user.id, documents=destination, status=Status.PENDING)
            await message.answer("–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ.")
            await message.answer(reg_finish)
            admins = await get_admins()
            print(admins)
            user = await get_user_by_tg_id(message.from_user.id)
            media = [ types.InputMediaPhoto(media=types.FSInputFile(user.car_photo), caption=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.") , types.InputMediaPhoto(media=types.FSInputFile(user.documents)) ]
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            tasks = []

            for admin in admins:
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                tasks.append(send_to_admin(message, media, admin))

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
            await asyncio.gather(*tasks, return_exceptions=True)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return
    print(res.status)
    if res.status == Status.PENDING or res.status == Status.REGISTRATION:
        # await update_user(message.from_user.id, status="PENDING")
        await message.answer("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(123)
        print("\n\n\n")
        admins = await get_admins()
        print(admins)
        user = await get_user_by_tg_id(message.from_user.id)
        media = [ types.InputMediaPhoto(media=types.FSInputFile(user.car_photo), caption=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.") , types.InputMediaPhoto(media=types.FSInputFile(user.documents)) ]
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        tasks = []

        for admin in admins:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            tasks.append(message.bot.send_media_group(admin.tg_id, media=media))
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            tasks.append(
                message.bot.send_message(
                    admin.tg_id,
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è - {message.from_user.id}",
                    reply_markup=ikb_admin_approve(message.from_user.id)  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
        await asyncio.gather(*tasks, return_exceptions=True)





@router_message.callback_query(lambda c: c.data.startswith("take_"))
async def take_order_callback(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[1])
    print("Order ID:", order_id)
    print(callback_query.from_user.id)
    res = await take_order(order_id, callback_query.from_user.id)
    if not res:
        await callback_query.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–∞–∑ {order_id} —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º.", show_alert=True)
    else:
        await callback_query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ {order_id}.", show_alert=True)
        await callback_query.bot.send_message(
            callback_query.from_user.id,
            f"–ü–∞—Å—Å–∞–∂–∏—Ä: {res.passenger_info}. –¢–µ–ª–µ—Ñ–æ–Ω: {res.passenger_phone}"
        )
        await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ



@router_message.message(Get_Photos.drive_ud)
async def order_city(message: types.Message, state: FSMContext):
    if message.photo and len(message.photo)==2:
            photo = []
            for i in message.photo:
                photo = i
                file_info = await message.bot.get_file(photo.file_id)
                file_path = file_info.file_path
                destination = f"downloads/{photo.file_id}.jpg"
                await message.bot.download_file(file_path, destination)
                photo.append(destination)
            await state.update_data(drive_ud=photo)
            await message.answer("üì∑  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ ")
            await state.set_state(Get_Photos.selfie)
    else:
            await message.answer("üì∑  –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç.")

@router_message.message(Get_Photos.selfie)
async def order_city(message: types.Message, state: FSMContext):
    if message.photo:
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            file_path = file_info.file_path
            destination = f"downloads/{photo.file_id}.jpg"
            await message.bot.download_file(file_path, destination)
            await state.update_data(selfie=destination)
            await message.answer(text_get_car_photos)
            await state.set_state(Get_Photos.car_photos)
    else:
            await message.answer("üì∑  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ ")

@router_message.message(Get_Photos.car_photos)
async def order_city(message: types.Message, state: FSMContext):
    if message.photo and len(message.photo)>=2:
            photo = []
            for i in message.photo:
                photo = i
                file_info = await message.bot.get_file(photo.file_id)
                file_path = file_info.file_path
                destination = f"downloads/{photo.file_id}.jpg"
                await message.bot.download_file(file_path, destination)
                photo.append(destination)
            await state.update_data(car_photos=photo)
            await message.answer("üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –°–¢–° —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç.")
            await state.set_state(Get_Photos.sts)
    else:
            await message.answer("üì∑  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è - —Å–Ω–∞—Ä—É–∂–∏ –∏ –∏–∑–Ω—É—Ç—Ä–∏.")

@router_message.message(Get_Photos.sts)
async def order_city(message: types.Message, state: FSMContext):
    if message.photo and len(message.photo)==2:
            photo = []
            for i in message.photo:
                photo = i
                file_info = await message.bot.get_file(photo.file_id)
                file_path = file_info.file_path
                destination = f"downloads/{photo.file_id}.jpg"
                await message.bot.download_file(file_path, destination)
                photo.append(destination)
            await state.update_data(sts=photo)
            data = await state.get_data()
            #json with all photos
            documents = {
                "selfie": data['selfie'],
                "car_photos": data['car_photos'], #list of 2 photos
                "driver_license": data['drive_ud'], #list of 2 photos
                "sts": data['sts'] #list of 2 photos
            }
            get_text_reg_user = generate_text_new_reg_user(user)

            reg_media = create_registration_media(documents, selfie_caption=get_text_reg_user)

            await update_user(message.from_user.id, documents=documents, status=Status.PENDING)
            await message.answer(reg_finish)
            admins = await get_admins()
            print(admins)
            user = await get_user_by_tg_id(message.from_user.id)
            # media = [ types.InputMediaPhoto(media=types.FSInputFile(user.car_photo), caption=get_text_reg_user) , types.InputMediaPhoto(media=types.FSInputFile(user.documents)) ]
            # # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            tasks = []

            for admin in admins:
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                tasks.append(send_to_admin(message, reg_media, admin))

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
            await asyncio.gather(*tasks, return_exceptions=True)
    else:
            await message.answer("üì∑  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–¢–° —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.")


from typing import Dict, List

def create_registration_media(documents: Dict[str, List[str]], selfie_caption: str = None) -> List[types.InputMediaPhoto]:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param documents: JSON —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      {
                          "selfie": str,
                          "car_photos": List[str],
                          "driver_license": List[str],
                          "sts": List[str]
                      }
    :param selfie_caption: –ø–æ–¥–ø–∏—Å—å –∫ —Å–µ–ª—Ñ–∏ (—Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
    :return: —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ send_media_group
    """
    media: List[types.InputMediaPhoto] = []

    # 1. –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    for car_photo in documents.get("car_photos", []):
        media.append(types.InputMediaPhoto(media=types.FSInputFile(car_photo)))

    # 2. –°–µ–ª—Ñ–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
    if selfie := documents.get("selfie"):
        media.insert(0, types.InputMediaPhoto(media=types.FSInputFile(selfie), caption=selfie_caption))

    # 3. –î–æ–∫—É–º–µ–Ω—Ç—ã: –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∏ –°–¢–°
    for doc_type in ["driver_license", "sts"]:
        for doc_photo in documents.get(doc_type, []):
            media.append(types.InputMediaPhoto(media=types.FSInputFile(doc_photo)))

    return media


